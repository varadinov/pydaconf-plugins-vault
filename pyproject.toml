[build-system]
requires = ["flit_core>=3.2,<4"]
build-backend = "flit_core.buildapi"

[project]
name = "pydaconf-plugins-vault"
dynamic = ["version"]
description = "Pydaconf Plugic for Hashicorp Vault and OpenBao"
readme = "README.md"
authors = [
    {name = "Borislav Varadinov", email = "borislav.varadinov@outlook.com"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Internet",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development",
    "Typing :: Typed",
]
requires-python = ">=3.10"
dependencies = [
    "hvac>=2.3.0",
    "pydaconf>=0.3.0",
]

[project.urls]
Homepage = "https://github.com/varadinov/pydaconf-plugins-vault"
Documentation = "https://github.com/varadinov/pydaconf-plugins-vault"
Repository = "https://github.com/varadinov/pydaconf-plugins-vault"
Issues = "https://github.com/varadinov/pydaconf-plugins-vault/issues"

[tool.flit.module]
name = "pydaconf_plugins_vault"

[tool.bandit]
exclude_dirs = ["build","dist","tests","scripts"]
number = 4
recursive = true
targets = "src"


[tool.black]
line-length = 120
fast = true

[tool.flake8]
max-line-length = 120
select = "F,E,W,B,B901,B902,B903"
exclude = [
    ".eggs",
    ".git",
    ".tox",
    "nssm",
    "obj",
    "out",
    "tests",
]
ignore = [
    "E722",
    "B001",
    "W503",
    "E203"
]

[dependency-groups]
dev = [
    "pytest>=8.3.4",
    "mypy>=1.15.0",
    "ruff>=0.9.5",
    "coverage>=7.6.11",
    "types-pyyaml>=6.0.12.20241230",
    "types-requests>=2.32.0.20241016",
    "coverage-badge>=1.1.2",
    "pre-commit>=4.1.0",
    "testcontainers>=4.9.1",
]


[tool.mypy]
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true
    exclude = [
        '^\.venv/.+$',
#        '^tests/.+$',
    ]

[tool.ruff]
line-length = 120
target-version = 'py310'

[tool.ruff.lint]
select = [
    'F',      # Pyflakes
    'E',      # pycodestyle (Error)
    'I',      # isort
    # 'D',      # pydocstyle
    'UP',     # pyupgrade
    'YTT',    # flake8-2020
    'B',      # flake8-bugbear
    'T10',    # flake8-debugger
    'T20',    # flake8-print
    'C4',     # flake8-comprehensions
    'PYI006', # flake8-pyi
    'PYI062', # flake8-pyi
    'PYI063', # flake8-pyi
    'PYI066', # flake8-pyi
]
ignore = ['D105', 'D107', 'D205', 'D415', 'E501', 'B011', 'B028', 'B904']
flake8-quotes = {inline-quotes = 'single', multiline-quotes = 'double'}
isort = { known-first-party = ['tests'] }
mccabe = { max-complexity = 14 }
pydocstyle = { convention = 'google' }


[tool.ruff.lint.per-file-ignores]
'pydaconf_plugins_vault/__init__.py' = ['F405', 'F403', 'D']


[tool.coverage.run]
source = ['pydaconf_plugins_vault']
# omit = []
branch = true
relative_files = true
context = '${CONTEXT}'

[tool.coverage.report]
precision = 2
exclude_lines = [
    'pragma: no cover',
    'raise NotImplementedError',
    'if TYPE_CHECKING:',
    'if typing.TYPE_CHECKING:',
    '@overload',
    '@typing.overload',
    '\(Protocol\):$',
    'typing.assert_never',
    'assert_never',
]

[tool.coverage.paths]
source = [
    'pydaconf_plugins_vault/',
]

[project.entry-points."pydaconf.plugins"]
vault = "pydaconf_plugins_vault.vault:VaultPlugin"
